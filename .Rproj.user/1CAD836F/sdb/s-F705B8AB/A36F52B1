{
    "contents" : "## makeCacheMatrix and cacheSolve together provide for the creation of a matrix \n## whose inverse is automatically cached upon solving\n\n## takes a matrix as input, provides getter/setter methods for contents and\n## inverse\n\nmakeCacheMatrix <- function(x = matrix()) {\n\n        inv <- NULL\n        set <- function(y) {\n                x <<- y\n                inv <<- NULL\n        }\n        get <- function() x\n        setinverse <- function(inverse) inv <<- inverse\n        getinverse <- function() inv\n        list(set = set, get = get, setinverse = setinverse,\n                                   getinverse = getinverse)\n}\n\n\n## takes \"special\" matrix created from makeCacheMatrix() and both caches\n## and returns it's inverse\n\ncacheSolve <- function(x, ...) {\n        ## Return a matrix that is the inverse of 'x'\n        inv <- x$getinverse()\n        if(!is.null(inv)) {\n                message(\"getting cached inverse\")\n                return(inv)\n        }\n        mat <- x$get()\n        inv <- solve(mat, ...)\n        x$setinverse(inv)\n        inv\n}\n",
    "created" : 1397659833615.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "539496123",
    "id" : "A36F52B1",
    "lastKnownWriteTime" : 1397662050,
    "path" : "~/Coursera/R_Programming/repo-Ex2/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}